names_to = "category",
values_to = "mean")
ggplot(km_comparison,
aes(x = as.factor(cluster),
y = mean,
fill = as.factor(category))) +
geom_bar(position = "dodge",
stat = "identity") +
scale_fill_brewer(palette = "Set3") +
labs(x = "Cluster",
y = "Value",
fill = "Factor")
df_split = initial_split(adhd %>% select(-c(initial)), strata=suicide)
df_split = rsample::initial_split(adhd %>% select(-c(initial)), strata=suicide)
df_train <- training(df_split)
View(adhd)
set.seed(123)
adhd2<-adhd %>% select(-c(initial))
training.samples <- adhd$suicide %>%
createDataPartition(p = 0.8, list = FALSE)
df_train <- adhd[training.samples, ]
df_test <- adhd[-training.samples, ]
set.seed(123)
adhd2<-adhd %>% select(-c(initial))
training.samples <- adhd$suicide %>%
createDataPartition(p = 0.75, list = FALSE)
df_train <- adhd[training.samples, ]
df_test <- adhd[-training.samples, ]
set.seed(123)
adhd2<-adhd %>% select(-c(initial))
training.samples <- adhd$suicide %>%
createDataPartition(p = 0.75, list = FALSE)
df_train <- adhd[training.samples, ]
df_test <- adhd[-training.samples, ]
svm_model = svm(suicide~., data=df_train, kernel='linear', probability=TRUE)
install.packages("e1071")
install.packages("e1071")
svm_model = svm(suicide~., data=df_train, kernel='linear', probability=TRUE)
svm_model = e1071::svm(suicide~., data=df_train, kernel='linear', probability=TRUE)
summary(svm_model)
svm_tune <- tune.svm(suicide~., data = df_train, gamma = 0.25, cost = seq(0.1,1,0.1))
svm_tune <- e1071::tune.svm(suicide~., data = df_train, gamma = 0.25, cost = seq(0.1,1,0.1))
svm_tune <- e1071::tune.svm(suicide~., data = df_train, gamma = 0.25, cost = seq(0.1,1,0.1))
svm_model = e1071::svm(suicide~., data=df_train, kernel='linear', probability=TRUE)
summary(svm_model)
svm_model <- e1071::svm(suicide~., data=df_train, kernel='linear', probability=TRUE)
summary(svm_model)
svm_model <- e1071::svm(suicide~., data=df_train, kernel='linear', probability=TRUE)
summary(svm_model)
svm_model <- e1071::svm(suicide~., data=df_train, kernel='linear', probability=TRUE)
summary(svm_model)
svm_tune <- e1071::tune.svm(suicide~., data = df_train, gamma = 0.25, cost = seq(0.1,1,0.1))
svm_model = svm(suicide~., data=df_train, cost=0.1, gamma=0.25, kernel='linear', probability=TRUE)
svm_model = e1071:svm(suicide~., data=df_train, cost=0.1, gamma=0.25, kernel='linear', probability=TRUE)
set.seed(42)
svm_model <- e1071::svm(suicide~., data=df_train, kernel='linear', probability=TRUE)
summary(svm_model)
svm_tune <- e1071::tune.svm(suicide~., data = df_train, gamma = 0.25, cost = seq(0.1,1,0.1))
install.packages("gbm")
gbm_model <- gbm(suicide~., data=df_train, distribution = 'gaussian', n.trees=10000
, shrinkage = 0.01, interaction.depth=4)
library(gbm)
gbm_model <- gbm(suicide~., data=df_train, distribution = 'gaussian', n.trees=10000
, shrinkage = 0.01, interaction.depth=4)
summary(df_train)
typeof(df_train$suicide)
library(gbm)
df_train2 <-df_train
df_train2$suicide <-  as.factor(df_train2$suicide)
gbm_model <- gbm(suicide~., data=df_train2, distribution = 'gaussian', n.trees=10000
, shrinkage = 0.01, interaction.depth=4)
df_split = initial_split(adhd %>% select(-c(initial)), strata=suicide)
library(gbm)
df_train<-df_train %>% select(-c(initial))
library(gbm)
library(dplyr)
df_train<-df_train %>% select(-c(initial))
gbm_model <- gbm(suicide~., data=df_train, distribution = 'gaussian', n.trees=10000
, shrinkage = 0.01, interaction.depth=4)
summary(gbm_model)
library(gbm)
library(dplyr)
df_train<-df_train %>% select(-c(initial))
df_test<-df_test %>% select(-c(initial))
library(gbm)
library(dplyr)
gbm_model <- gbm(suicide~., data=df_train, distribution = 'gaussian', n.trees=10000
, shrinkage = 0.01, interaction.depth=4)
summary(gbm_model)
plot(gbm_model, i='lstat')
plot(gbm_model, i="lstat")
plot(gbm_model, i="rm")
plot(gbm_model, i="adhd_total")
plot(gbm_model, i="md_total")
library(gbm)
library(dplyr)
df_train$suicide <- as.integer(df_train$suicide)
df_test$suicide <- as.integer(df_test$suicide)
gbm_model <- gbm(suicide~., data=df_train, distribution = 'gaussian', n.trees=10000
, shrinkage = 0.01, interaction.depth=4)
summary(gbm_model)
plot(gbm_model, i="md_total")
plot(gbm_model, i="adhd_total")
plot(gbm_model, i="md_total")
plot(gbm_model, i="adhd_total")
n.trees = seq(from=100, to =10000, by=100)
predmat = predict(gbm_model, newdata=df_test, n.trees = n.trees)
dim(predmat)
berr = with(df_test, apply((predmat-medv)^2,2,mean))
berr = with(df_test, apply((predmat-suicide)^2,2,mean))
plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
n.trees = seq(from=100, to =5000, by=100)
predmat = predict(gbm_model, newdata=df_test, n.trees = n.trees)
dim(predmat)
berr = with(df_test, apply((predmat-suicide)^2,2,mean))
plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
n.trees = seq(from=100, to =3000, by=50)
predmat = predict(gbm_model, newdata=df_test, n.trees = n.trees)
dim(predmat)
berr = with(df_test, apply((predmat-suicide)^2,2,mean))
plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
n.trees = seq(from=100, to =2000, by=25)
predmat = predict(gbm_model, newdata=df_test, n.trees = n.trees)
dim(predmat)
berr = with(df_test, apply((predmat-suicide)^2,2,mean))
plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
n.trees = seq(from=10, to =2000, by=25)
predmat = predict(gbm_model, newdata=df_test, n.trees = n.trees)
dim(predmat)
berr = with(df_test, apply((predmat-suicide)^2,2,mean))
plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
#plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
gbm_mse_seq <- apply(predmat, 2, function(x) mse(df_test$suicide, x))
install.packages("MLmetrics")
library("MLmetrics")
#plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
gbm_mse_seq <- apply(predmat, 2, function(x) mse(df_test$suicide, x))
#plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
gbm_mse_seq <- apply(predmat, 2, function(x) MLmetrics::mse(df_test$suicide, x))
install.packages("mltools")
library(mltools)
#plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
gbm_mse_seq <- apply(predmat, 2, function(x) mltools::mse(df_test$suicide, x))
ggplot(data = data.frame(Tree = 1:2000, MSE = gbm_mse_seq), aes(x = Tree, y = MSE)) +
geom_line() +
theme_rw()
library(gglplot)
library(ggplot2)
#plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
gbm_mse_seq <- apply(predmat, 2, function(x) mltools::mse(df_test$suicide, x))
ggplot(data = data.frame(Tree = 1:2000, MSE = gbm_mse_seq), aes(x = Tree, y = MSE)) +
geom_line() +
theme_rw()
#plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
gbm_mse_seq <- apply(predmat, 2, function(x) mltools::mse(df_test$suicide, x))
ggplot2::ggplot(data = data.frame(Tree = 1:2000, MSE = gbm_mse_seq), aes(x = Tree, y = MSE)) +
geom_line() +
theme_rw()
#plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
gbm_mse_seq <- apply(predmat, 2, function(x) mltools::mse(df_test$suicide, x))
ggplot2::ggplot(data = data.frame(Tree = 1:2000, MSE = gbm_mse_seq), aes(x = Tree, y = MSE)) +
geom_line() +
ggplot2::theme_rw()
#plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
gbm_mse_seq <- apply(predmat, 2, function(x) mltools::mse(df_test$suicide, x))
ggplot2::ggplot(data = data.frame(Tree = 1:2000, MSE = gbm_mse_seq), aes(x = Tree, y = MSE)) +
geom_line() +
#plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
gbm_mse_seq <- apply(predmat, 2, function(x) mltools::mse(df_test$suicide, x))
ggplot2::ggplot(data = data.frame(Tree = 1:2000, MSE = gbm_mse_seq), aes(x = Tree, y = MSE)) +
geom_line()
#plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
gbm_mse_seq <- apply(predmat, 2, function(x) mltools::mse(df_test$suicide, x))
ggplot2::ggplot(data = data.frame(Tree = 1:10000, MSE = gbm_mse_seq), aes(x = Tree, y = MSE)) +
geom_line()
#plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
gbm_mse_seq <- apply(predmat, 2, function(x) mltools::mse(df_test$suicide, x))
ggplot2::ggplot(data = data.frame(Tree = 1:2000, MSE = gbm_mse_seq), aes(x = Tree, y = MSE)) +
geom_line() +
ggplot2::theme_rw()
#plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
gbm_mse_seq <- apply(predmat, 2, function(x) mltools::mse(df_test$suicide, x))
ggplot2::ggplot(data = data.frame(Tree = 1:2000, MSE = gbm_mse_seq), aes(x = Tree, y = MSE)) +
geom_line() +
ggplot2::theme_rw()
#plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
gbm_mse_seq <- apply(predmat, 2, function(x) mltools::mse(df_test$suicide, x))
ggplot2::ggplot(data = data.frame(Tree = 1:2000, MSE = gbm_mse_seq), aes(x = Tree, y = MSE)) +
geom_line() +
theme_rw()
#plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
gbm_mse_seq <- apply(predmat, 2, function(x) mltools::mse(df_test$suicide, x))
ggplot2::ggplot(data = data.frame(Tree = 1:2000, MSE = gbm_mse_seq), aes(x = Tree, y = MSE)) +
geom_line()
#plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
gbm_mse_seq <- apply(predmat, 2, function(x) mltools::mse(df_test$suicide, x))
ggplot2::ggplot(data = data.frame(Tree = 1:10000, MSE = gbm_mse_seq), aes(x = Tree, y = MSE)) +
geom_line()
#plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
n.trees = seq(from=10, to =10000, by=1000)
predmat = predict(gbm_model, newdata=df_test, n.trees = n.trees)
dim(predmat)
berr = with(df_test, apply((predmat-suicide)^2,2,mean))
plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
n.trees = seq(from=10, to =10000, by=100)
predmat = predict(gbm_model, newdata=df_test, n.trees = n.trees)
dim(predmat)
berr = with(df_test, apply((predmat-suicide)^2,2,mean))
plot(n.trees, berr, pch=19, ylab="mean Squared Error", xlab= "# of Trees", main ="Boosting Test Error")
library(gbm)
library(dplyr)
gbm_model <- gbm(suicide~., data=df_train, distribution = 'bernoulli', n.trees=1000
, shrinkage = 0.01, interaction.depth=6)
summary(gbm_model)
library(gbm)
library(dplyr)
gbm_model <- gbm(suicide~., data=df_train, distribution = 'bernoulli', n.trees=1000
, shrinkage = 0.01, interaction.depth=6)
#summary(gbm_model)
head(summary(gbm_model, order=TRUE,  cBars = 50), n = 10)
View(gbm_model)
library(gbm)
library(dplyr)
df_train$suicide<-as.factor(df_train$suicide)
gbm_model <- gbm(suicide~., data=df_train, distribution = 'bernoulli', n.trees=1000
, shrinkage = 0.01, interaction.depth=6)
library(gbm)
library(dplyr)
df_train$suicide<-as.factor(df_train$suicide)
gbm_model <- gbm(suicide~., data= df_train, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
View(df_train)
View(df_train2)
library(gbm)
library(dplyr)
$df_train$suicide<-as.factor(df_train2$suicide)
library(gbm)
library(dplyr)
#df_train$suicide<-as.factor(df_train2$suicide)
gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
library(gbm)
library(dplyr)
df_train2$suicide<-as.factor(df_train2$suicide)
gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
View(df_train2)
library(gbm)
library(dplyr)
df_train2 %>% select(-c(initial))
#df_train2$suicide<-as.factor(df_train2$suicide)
gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
View(df_train2)
library(gbm)
library(dplyr)
df_train2 %>% select(-c(initial))
df_train2$suicide<-as.factor(df_train2$suicide)
gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
library(gbm)
library(dplyr)
df_train2 %>% select(-c(initial))
df_train2$suicide<-as.factor(df_train2$suicide)
gbm_model <- gbm(as.factor(df_train2$suicide)~., data= df_train2, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
library(gbm)
library(dplyr)
df_train2<-df_train2 %>% select(-c(initial))
df_train2$suicide<-as.factor(df_train2$suicide)
gbm_model <- gbm(as.factor(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
#summary(gbm_model)
head(summary(gbm_model, order=TRUE,  cBars = 50), n = 10)
library(gbm)
library(dplyr)
df_train2<-df_train2 %>% select(-c(initial))
library(gbm)
library(dplyr)
df_train2$suicide<-as.factor(df_train2$suicide)
gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
#summary(gbm_model)
head(summary(gbm_model, order=TRUE,  cBars = 50), n = 10)
View(df_train2)
library(gbm)
library(dplyr)
df_train2$suicide<-as.factor(df_train2$suicide)
gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
#summary(gbm_model)
head(summary(gbm_model, order=TRUE,  cBars = 50, xlim = 1000), n = 10)
library(gbm)
library(dplyr)
df_train2$suicide<-as.factor(df_train2$suicide)
gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
#summary(gbm_model)
head(summary(gbm_model, order=TRUE,  cBars = 50, xlim = 100), n = 10)
library(gbm)
library(dplyr)
df_train2$suicide<-as.factor(df_train2$suicide)
gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
#summary(gbm_model)
head(summary(gbm_model, order=TRUE,  cBars = 50, xlim = 1), n = 10)
library(gbm)
library(dplyr)
df_train2$suicide<-as.factor(df_train2$suicide)
gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
#summary(gbm_model)
summary(gbm_model)
library(gbm)
library(dplyr)
df_train2$suicide<-as.factor(df_train2$suicide)
gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
#summary(gbm_model)
head(summary(model.boost, order=TRUE,  cBars = 50), n = 10)
library(gbm)
library(dplyr)
df_train2$suicide<-as.factor(df_train2$suicide)
gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
#summary(gbm_model)
head(summary(gbm_model, order=TRUE,  cBars = 50), n = 10)
library(gbm)
library(dplyr)
df_train2$suicide<-as.factor(df_train2$suicide)
gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
#summary(gbm_model)
best.iter <- gbm.perf(gbm_model, method = "OOB")
library(gbm)
library(dplyr)
df_train2$suicide<-as.factor(df_train2$suicide)
gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
#summary(gbm_model)
set.seed(102)  # for reproducibility
gbm1 <- gbm(suicide~., data= df_train2, var.monotone = c(0, 0, 0, 0, 0, 0),
distribution = "gaussian", n.trees = 100, shrinkage = 0.1,
interaction.depth = 3, bag.fraction = 0.5, train.fraction = 0.5,
n.minobsinnode = 10, cv.folds = 5, keep.data = TRUE,
verbose = FALSE, n.cores = 1)
library(gbm)
library(dplyr)
df_train2$suicide<-as.factor(df_train2$suicide)
gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=6)
#summary(gbm_model)
set.seed(102)  # for reproducibility
gbm1 <- gbm(suicide~., data= df_train2,
distribution = "gaussian", n.trees = 100, shrinkage = 0.1,
interaction.depth = 3, bag.fraction = 0.5, train.fraction = 0.5,
n.minobsinnode = 10, cv.folds = 5, keep.data = TRUE,
verbose = FALSE, n.cores = 1)
# Check performance using the out-of-bag (OOB) error; the OOB error typically
# underestimates the optimal number of iterations
best.iter <- gbm.perf(gbm1, method = "OOB")
print(best.iter)
# Check performance using 5-fold cross-validation
best.iter <- gbm.perf(gbm1, method = "cv")
print(best.iter)
# Plot relative influence of each variable
par(mfrow = c(1, 2))
summary(gbm1, n.trees = 1)          # using first tree
summary(gbm1, n.trees = best.iter)  # using estimated best number of trees
# Compactly print the first and last trees for curiosity
print(pretty.gbm.tree(gbm1, i.tree = 1))
print(pretty.gbm.tree(gbm1, i.tree = gbm1$n.trees))
# Predict on the new data using the "best" number of trees; by default,
# predictions will be on the link scale
Yhat <- predict(gbm1, newdata = df_test, n.trees = best.iter, type = "link")
# least squares error
print(sum((data2$Y - Yhat)^2))
# Predict on the new data using the "best" number of trees; by default,
# predictions will be on the link scale
Yhat <- predict(gbm1, newdata = df_test, n.trees = best.iter, type = "link")
# least squares error
print(sum((df_test$suicide - Yhat)^2))
View(df_train2)
View(df_test)
# Predict on the new data using the "best" number of trees; by default,
# predictions will be on the link scale
Yhat <- predict(gbm1, newdata = df_test, n.trees = best.iter, type = "link")
# least squares error
print(sum((df_test$suicide - Yhat)^2))
library(gbm)
library(dplyr)
df_train$suicide<-as.factor(df_train$suicide)
df_test$suicide<-as.factor(df_test$suicide)
#gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
#                ,  interaction.depth=6)
#summary(gbm_model)
set.seed(102)  # for reproducibility
gbm1 <- gbm(suicide~., data= df_train,
distribution = "gaussian", n.trees = 1000, shrinkage = 0.1,
interaction.depth = 6, bag.fraction = 0.5, train.fraction = 0.5,
n.minobsinnode = 10, cv.folds = 5, keep.data = TRUE,
verbose = FALSE, n.cores = 1)
# Check performance using the out-of-bag (OOB) error; the OOB error typically
# underestimates the optimal number of iterations
best.iter <- gbm.perf(gbm1, method = "OOB")
print(best.iter)
library(gbm)
library(dplyr)
df_train$suicide<-as.factor(df_train$suicide)
df_test$suicide<-as.factor(df_test$suicide)
#gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
#                ,  interaction.depth=6)
#summary(gbm_model)
set.seed(102)  # for reproducibility
gbm1 <- gbm(suicide~., data= df_train,
distribution = "gaussian", n.trees = 500, shrinkage = 0.1,
interaction.depth = 6, bag.fraction = 0.5, train.fraction = 0.5,
n.minobsinnode = 10, cv.folds = 5, keep.data = TRUE,
verbose = FALSE, n.cores = 1)
# Check performance using the out-of-bag (OOB) error; the OOB error typically
# underestimates the optimal number of iterations
best.iter <- gbm.perf(gbm1, method = "OOB")
print(best.iter)
library(gbm)
library(dplyr)
df_train$suicide<-as.factor(df_train$suicide)
df_test$suicide<-as.factor(df_test$suicide)
#gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
#                ,  interaction.depth=6)
#summary(gbm_model)
set.seed(102)  # for reproducibility
gbm1 <- gbm(suicide~., data= df_train,
distribution = "gaussian", n.trees = 100, shrinkage = 0.1,
interaction.depth = 6, bag.fraction = 0.5, train.fraction = 0.5,
n.minobsinnode = 10, cv.folds = 5, keep.data = TRUE,
verbose = FALSE, n.cores = 1)
# Check performance using the out-of-bag (OOB) error; the OOB error typically
# underestimates the optimal number of iterations
best.iter <- gbm.perf(gbm1, method = "OOB")
print(best.iter)
library(gbm)
library(dplyr)
df_train$suicide<-as.factor(df_train$suicide)
df_test$suicide<-as.factor(df_test$suicide)
#gbm_model <- gbm(suicide~., data= df_train2, distribution = 'bernoulli', n.trees=1000
#                ,  interaction.depth=6)
#summary(gbm_model)
set.seed(102)  # for reproducibility
gbm1 <- gbm(suicide~., data= df_train,
distribution = "gaussian", n.trees = 100, shrinkage = 0.1,
interaction.depth = 6, bag.fraction = 0.5, train.fraction = 0.5,
n.minobsinnode = 10, cv.folds = 5, keep.data = TRUE,
verbose = FALSE, n.cores = 1)
# Check performance using the out-of-bag (OOB) error; the OOB error typically
# underestimates the optimal number of iterations
best.iter <- gbm.perf(gbm1, method = "OOB")
print(best.iter)
# Check performance using 5-fold cross-validation
best.iter <- gbm.perf(gbm1, method = "cv")
print(best.iter)
# Plot relative influence of each variable
par(mfrow = c(1, 2))
summary(gbm1, n.trees = 1)          # using first tree
summary(gbm1, n.trees = best.iter)  # using estimated best number of trees
# Compactly print the first and last trees for curiosity
print(pretty.gbm.tree(gbm1, i.tree = 1))
print(pretty.gbm.tree(gbm1, i.tree = gbm1$n.trees))
# Predict on the new data using the "best" number of trees; by default,
# predictions will be on the link scale
Yhat <- predict(gbm1, newdata = df_test, n.trees = best.iter, type = "link")
# least squares error
print(sum((df_test$suicide - Yhat)^2))
# Plot relative influence of each variable
par(mfrow = c(1, 2))
#summary(gbm1, n.trees = 1)          # using first tree
summary(gbm1, n.trees = best.iter)  # using estimated best number of trees
# Plot relative influence of each variable
par(mfrow = c(1, 2))
summary(gbm1, n.trees = 1)          # using first tree
#summary(gbm1, n.trees = best.iter)  # using estimated best number of trees
library(gbm)
library(dplyr)
df_train$suicide<-as.factor(df_train$suicide)
df_test$suicide<-as.factor(df_test$suicide)
gbm_model <- gbm(suicide~., data= df_train, distribution = 'bernoulli', n.trees=1000
,  interaction.depth=4, cv.folds = 2)
View(df_train)
?make.names
?gbm
library(gbm)
library(dplyr)
df_train$suicide<-as.factor(df_train$suicide)
df_test$suicide<-as.factor(df_test$suicide)
end_trn =nrow(df_train)
ntrees = 5000
#gbm_model <- gbm(suicide~., data= df_train, distribution = 'bernoulli', n.trees=1000
#               ,  interaction.depth=4, cv.folds = 2)
gbm_model <- gbm.fit(
suicide~.,
data= df_train,
distribution = "bernoulli",
n.trees = ntrees,
shrinkage = 0.01,
interaction.depth = 3,
n.minobsinnode = 10,
nTrain = round(end_trn * 0.8),
verbose = TRUE,
)
?gbm.fit
View(df_train)
?gbm
